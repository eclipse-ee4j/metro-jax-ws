<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 1997, 2020 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Distribution License v. 1.0, which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: BSD-3-Clause

-->

<definitions
        name="HelloTest"
        targetNamespace="urn:test"
        xmlns="http://schemas.xmlsoap.org/wsdl/"
        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
        xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:types="urn:test:types"
        xmlns:tns="urn:test">

    <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
        <jaxws:enableWrapperStyle>false</jaxws:enableWrapperStyle>
        <jaxws:enableAsyncMapping>true</jaxws:enableAsyncMapping>
    </jaxws:bindings>

    <types>
        <xsd:schema
                targetNamespace="urn:test:types"
                attributeFormDefault="qualified"
                elementFormDefault="qualified">

            <xsd:element name="Hello">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="argument" type="xsd:string"/>
                        <xsd:element name="extra" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="void" type="types:voidType"/>
            <xsd:complexType name="voidType">
                <xsd:sequence/>
            </xsd:complexType>

            <xsd:complexType name="HelloType">
                <xsd:sequence>
                    <xsd:element name="argument" type="xsd:string"/>
                    <xsd:element name="extra" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>

            <xsd:element name="HelloOutput">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="argument" type="xsd:string"/>
                        <xsd:element name="extra" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="Foo">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="fooChild1" type="xsd:string"/>
                        <xsd:element name="fooChild2" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="FooResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="fooResponse1" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="info" type="xsd:string"/>
            <xsd:element name="infoFaultDetail" type="xsd:string"/>
        </xsd:schema>
    </types>

    <message name="HelloRequest">
        <part name="parameters" element="types:Hello"/>
    </message>

    <message name="HelloResponse">
        <part name="parameters" element="types:HelloOutput"/>
    </message>

    <message name="FooRequest">
        <part name="in" element="types:Foo"/>
    </message>

    <message name="FooResponse">
        <part name="out" element="types:FooResponse"/>
    </message>

    <message name="FooFaultMessage">
        <part name="fooFault" element="types:Foo"/>
    </message>

    <message name="headerMessage">
        <part name="info" element="types:info"/>
        <part name="infoFault" element="types:infoFaultDetail"/>
    </message>

    <message name="voidRequest">
        <part name="request" element="types:void"/>
    </message>


    <message name="voidResponse">
        <part name="response" element="types:void"/>
    </message>


    <portType name="Hello">

        <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
            <!-- rename the generated SEI from Hello.java to HelloWorld.java -->
            <jaxws:class name="HelloWorld"/>
            <!-- disable async operation -->
            <jaxws:enableAsyncMapping>false</jaxws:enableAsyncMapping>
        </jaxws:bindings>

        <operation name="void">
            <jaxws:bindings wsdlLocation="hello_literal.wsdl" xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                <!-- rename the generated java method name-->
                <jaxws:method name="voidTest"/>
                <jaxws:enableWrapperStyle>true</jaxws:enableWrapperStyle>
            </jaxws:bindings>
            <input message="tns:voidRequest"/>
            <output message="tns:voidResponse"/>
        </operation>

        <operation name="Hello">
            <jaxws:bindings wsdlLocation="hello_literal.wsdl" xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                <!-- rename the generated java method name-->
                <jaxws:method name="helloWorld"/>
                <jaxws:enableWrapperStyle>true</jaxws:enableWrapperStyle>
                <jaxws:parameter
                        part="wsdl:definitions/wsdl:message[@name='HelloRequest']/wsdl:part[@name='parameters']"
                        childElementName="types:argument" name="helloArgument"/>
                <jaxws:parameter
                        part="wsdl:definitions/wsdl:message[@name='HelloRequest']/wsdl:part[@name='parameters']"
                        childElementName="types:extra" name="helloExtra"/>
            </jaxws:bindings>
            <input message="tns:HelloRequest"/>
            <output message="tns:HelloResponse"/>
        </operation>

        <operation name="Foo">
            <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                <!-- rename the generated java method name-->
                <jaxws:method name="echoFoo"/>
                <jaxws:enableAsyncMapping>false</jaxws:enableAsyncMapping>
                <jaxws:enableWrapperStyle>false</jaxws:enableWrapperStyle>
                <jaxws:parameter part="wsdl:definitions/wsdl:message[@name='FooRequest']/wsdl:part[@name='in']"
                                 name="fooRequest"/>
            </jaxws:bindings>
            <input message="tns:FooRequest"/>
            <output message="tns:FooResponse"/>
            <fault name="FooFault" message="tns:FooFaultMessage">
                <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                    <jaxws:class name="FooException"/>
                </jaxws:bindings>
            </fault>
        </operation>
    </portType>

    <binding name="HelloBinding" type="tns:Hello">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

        <operation name="void">
            <input>
                <soap:body use="literal"/>
            </input>

            <output>
                <soap:body use="literal"/>
            </output>
        </operation>

        <operation name="Hello">
            <soap:operation soapAction="urn:test:hello"/>
            <input>
                <soap:body use="literal"/>
                <soap:header message="tns:headerMessage" part="info">
                    <!--soap:headerfault message="tns:headerMessage" part="infoFault"/-->
                </soap:header>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                <jaxws:parameter part="wsdl:definitions/wsdl:message[@name='headerMessage']/wsdl:part[@name='info']"
                                 element="types:info" name="infoHeader"/>
                <!--jaxws:exception>
                    <jaxws:class name="infoException"/>
                </jaxws:exception-->
            </jaxws:bindings>
        </operation>

        <operation name="Foo">
            <soap:operation soapAction="urn:test:hello"/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
                <soap:header message="tns:headerMessage" part="info">
                    <!--soap:headerfault message="tns:headerMessage" part="infoFault"/-->
                </soap:header>
            </output>

            <fault name="FooFault">
                <soap:fault name="FooFault" use="literal"/>
            </fault>
        </operation>
    </binding>

    <service name="Hello">
        <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
            <jaxws:class name="CustomService"/>
        </jaxws:bindings>

        <port name="HelloPort" binding="tns:HelloBinding">
            <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                <jaxws:method name="getCustomizedPort"/>
            </jaxws:bindings>
            <soap:address location="http://test.org/hello"/>
        </port>

        <!--
            <port name="HelloPort2" binding="tns:HelloBinding">
            <jaxws:bindings xmlns:jaxws="https://jakarta.ee/xml/ns/jaxws">
                <jaxws:method name="getCustomizedPort2"/>
                <jaxws:provider>false</jaxws:provider>
            </jaxws:bindings>
              <soap:address location="http://test.org/hello2"/>
            </port>
        -->
    </service>

</definitions>
