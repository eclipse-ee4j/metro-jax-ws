/*
 * Copyright (c) 2004, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License v. 1.0, which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

package server.provider.wsdl_hello_lit_context.server;

import java.util.Iterator;
import jakarta.xml.ws.Provider;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebServiceException;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Map;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.ws.Service.Mode;
import jakarta.xml.soap.MessageFactory;
import jakarta.xml.soap.SOAPBody;
import jakarta.xml.soap.SOAPElement;
import jakarta.xml.soap.SOAPException;
import jakarta.xml.soap.SOAPMessage;
import javax.xml.namespace.QName;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import jakarta.xml.ws.ServiceMode;
import jakarta.xml.ws.WebServiceContext;
import jakarta.xml.ws.handler.MessageContext;
import jakarta.annotation.Resource;

/**
 * Impl class for interface generated by wscompile -import.
 * This class will overwrite the impl class generated by wscompile.
 */
@ServiceMode(value=Service.Mode.MESSAGE)
public abstract class ProviderImpl implements Provider<Source> {

    private int combo;
    public abstract WebServiceContext getContext();
    public abstract boolean isInjectionDone();

    private void printContext() {
		WebServiceContext wsContext = getContext();
        MessageContext ctxt = wsContext.getMessageContext();
/*
        TODO: WSDL_DESCRIPTION's value type is not specified correctly in spec
        InputSource source = (InputSource)ctxt.getProperty(JAXRPCContext.WSDL_DESCRIPTION);
        verifySource(source);
*/
        QName expService = new QName("urn:test", "Hello");
        QName expPort = new QName("urn:test", "HelloPort");
        QName gotService = (QName)ctxt.get(MessageContext.WSDL_SERVICE);
        QName gotPort = (QName)ctxt.get(MessageContext.WSDL_PORT);
        if (!expService.equals(gotService)) {
            System.out.println("WSDL_SERVICE expected="+expService+" Got="+gotService);
            throw new WebServiceException(
                "WSDL_SERVICE expected="+expService+" Got="+gotService);
        }
        if (!expPort.equals(gotPort)) {
            System.out.println("WSDL_PORT expected="+expPort+" Got="+gotPort);
            throw new WebServiceException(
                "WSDL_PORT expected="+expPort+" Got="+gotPort);
        }
		// Get a property from context
        String gotProp = (String)ctxt.get("foo");
        if (!gotProp.equals("bar")) {
            System.out.println("foo property: expected=bar Got="+gotProp);
            throw new WebServiceException(
                "foo property: expected=bar Got="+gotProp);
        }

		// Modify the same property in the context
		ctxt.put("foo", "return-bar");

		// Set a property in the context
		ctxt.put("return-foo", "return-bar");
    }

	public SOAPMessage invoke(SOAPMessage msg) {
		throw new WebServiceException("Wrong method is invoked");
	}

    /* 
     */
    public Source invoke(Source msg) {
	if (!isInjectionDone()) {
		throw new WebServiceException("Injection is not done");
        }
    	// Test if we got the correct SOAPMessage that has handler changes
    	try {
    		MessageFactory fact = MessageFactory.newInstance();
    		SOAPMessage soap = fact.createMessage();
    		soap.getSOAPPart().setContent(msg);
    		SOAPBody body = soap.getSOAPBody();
    		Iterator i = body.getChildElements();
    		SOAPElement elem = (SOAPElement)i.next();
    		QName name = elem.getElementQName();
    		QName exp = new QName("urn:test:types", "MyVoidTest");
    		if (!exp.equals(name)) {
    			throw new WebServiceException("Handler changes aren't reflected");
    		}
    	} catch(SOAPException e) {
            throw new WebServiceException("Got Incorrect Source");
        }
    	
        printContext();
		String content = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"><soapenv:Body>  <VoidTestResponse xmlns=\"urn:test:types\"></VoidTestResponse></soapenv:Body></soapenv:Envelope>";
		Source source = new StreamSource(
			new ByteArrayInputStream(content.getBytes()));
		return source;
    }


}
